openapi: 3.0.3
info:
  title: Dua Insan Story API - Admin
  description: Dokumentasi API lengkap untuk alur kerja sisi admin, termasuk manajemen produk, kategori, opsi, dan pesanan.
  version: 1.0.0
servers:
  - url: http://127.0.0.1:8000/api/v1
    description: Server Pengembangan Lokal

tags:
  - name: Admin - Kategori Produk
    description: Mengelola kategori produk.
  - name: Admin - Produk
    description: Mengelola produk.
  - name: Admin - Gambar Produk
    description: Mengelola gambar produk.
  - name: Admin - Item Tambahan
    description: Mengelola item tambahan (Add-ons).
  - name: Admin - Atribut
    description: Mengelola atribut opsi (e.g., Ukuran).
  - name: Admin - Nilai Atribut
    description: Mengelola nilai atribut (e.g., Kecil, Sedang).
  - name: Admin - Opsi Produk
    description: Menautkan opsi ke produk.
  - name: Admin - Tautan Item Tambahan
    description: Menautkan item tambahan ke produk.

# ===============================================================
# PATHS (DEFINISI ENDPOINT)
# ===============================================================
paths:
  # ------------------ ADMIN: KATEGORI PRODUK ------------------
  /admin/product-categories:
    get:
      tags: [Admin - Kategori Produk]
      summary: (Admin) Daftar semua kategori produk
      description: Mengambil daftar lengkap semua kategori produk yang ada di sistem.
      security:
        - sanctum: []
      responses:
        "200":
          description: Daftar kategori berhasil diambil.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ProductCategory"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

    post:
      tags: [Admin - Kategori Produk]
      summary: (Admin) Buat kategori produk baru
      description: Membuat kategori produk baru dengan nama, deskripsi, dan sebuah gambar opsional.
      security:
        - sanctum: []
      requestBody:
        $ref: "#/components/requestBodies/StoreProductCategoryBody"
      responses:
        "201":
          description: Kategori berhasil dibuat.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductCategoryResponse"
        "422":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /admin/product-categories/{productCategoryId}:
    get:
      tags: [Admin - Kategori Produk]
      summary: (Admin) Lihat detail kategori produk
      description: Mengambil detail informasi dari satu kategori produk berdasarkan ID-nya.
      security:
        - sanctum: []
      parameters:
        - $ref: "#/components/parameters/ProductCategoryId"
      responses:
        "200":
          description: Detail kategori berhasil diambil.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/ProductCategory"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

    post:
      tags: [Admin - Kategori Produk]
      summary: (Admin) Perbarui kategori produk
      description: |
        Memperbarui data kategori produk yang sudah ada. 
        **Penting:** Karena pembaruan ini mendukung unggah file, metode yang digunakan adalah `POST` dengan menyertakan field `_method` bernilai `PUT` atau `PATCH` di dalam `form-data`.
      security:
        - sanctum: []
      parameters:
        - $ref: "#/components/parameters/ProductCategoryId"
      requestBody:
        $ref: "#/components/requestBodies/UpdateProductCategoryBody"
      responses:
        "200":
          description: Kategori berhasil diperbarui.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductCategoryResponse"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

    delete:
      tags: [Admin - Kategori Produk]
      summary: (Admin) Hapus kategori produk
      description: Menghapus sebuah kategori produk. Operasi akan gagal jika kategori tersebut masih memiliki produk terkait.
      security:
        - sanctum: []
      parameters:
        - $ref: "#/components/parameters/ProductCategoryId"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "409":
          description: Gagal menghapus karena kategori masih memiliki produk terkait.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  # ------------------ ADMIN: PRODUK ------------------
  /admin/products:
    get:
      tags: [Admin - Produk]
      summary: (Admin) Lihat semua produk
      security: [{ sanctum: [] }]
      responses:
        "200": { description: OK }
    post:
      tags: [Admin - Produk]
      summary: (Admin) Buat produk baru
      security: [{ sanctum: [] }]
      requestBody:
        $ref: "#/components/requestBodies/StoreProductBody"
      responses:
        "201": { description: Created }
        "422": { $ref: "#/components/responses/ValidationError" }

  /admin/products/{productId}:
    get:
      tags: [Admin - Produk]
      summary: (Admin) Lihat detail produk
      security: [{ sanctum: [] }]
      parameters: [{ $ref: "#/components/parameters/ProductId" }]
      responses:
        "200": { description: OK }
    patch:
      tags: [Admin - Produk]
      summary: (Admin) Update produk
      security: [{ sanctum: [] }]
      parameters: [{ $ref: "#/components/parameters/ProductId" }]
      requestBody:
        $ref: "#/components/requestBodies/UpdateProductBody"
      responses:
        "200": { description: OK }
    delete:
      tags: [Admin - Produk]
      summary: (Admin) Hapus produk
      security: [{ sanctum: [] }]
      parameters: [{ $ref: "#/components/parameters/ProductId" }]
      responses:
        "200": { $ref: "#/components/responses/SuccessMessage" }

  # ------------------ ADMIN: GAMBAR PRODUK ------------------
  /admin/products/{productId}/images:
    post:
      tags: [Admin - Gambar Produk]
      summary: (Admin) Unggah gambar produk
      security: [{ sanctum: [] }]
      parameters: [{ $ref: "#/components/parameters/ProductId" }]
      requestBody:
        $ref: "#/components/requestBodies/StoreProductImageBody"
      responses:
        "201": { description: Created }
  /admin/images/{imageId}:
    delete:
      tags: [Admin - Gambar Produk]
      summary: (Admin) Hapus gambar produk
      security: [{ sanctum: [] }]
      parameters: [{ $ref: "#/components/parameters/ImageId" }]
      responses:
        "200": { $ref: "#/components/responses/SuccessMessage" }

  # ------------------ ADMIN: ITEM TAMBAHAN (ADD-ONS) ------------------
  /admin/add-ons:
    get:
      tags: [Admin - Item Tambahan]
      summary: (Admin) Lihat semua item tambahan
      security: [{ sanctum: [] }]
      responses:
        "200": { description: OK }
    post:
      tags: [Admin - Item Tambahan]
      summary: (Admin) Buat item tambahan
      security: [{ sanctum: [] }]
      requestBody:
        $ref: "#/components/requestBodies/StoreAddOnBody"
      responses:
        "201": { description: Created }
  /admin/add-ons/{addOnId}:
    get:
      tags: [Admin - Item Tambahan]
      summary: (Admin) Lihat detail item tambahan
      security: [{ sanctum: [] }]
      parameters: [{ $ref: "#/components/parameters/AddOnId" }]
      responses:
        "200": { description: OK }
    patch:
      tags: [Admin - Item Tambahan]
      summary: (Admin) Update item tambahan
      security: [{ sanctum: [] }]
      parameters: [{ $ref: "#/components/parameters/AddOnId" }]
      requestBody:
        $ref: "#/components/requestBodies/UpdateAddOnBody"
      responses:
        "200": { description: OK }
    delete:
      tags: [Admin - Item Tambahan]
      summary: (Admin) Hapus item tambahan
      security: [{ sanctum: [] }]
      parameters: [{ $ref: "#/components/parameters/AddOnId" }]
      responses:
        "200": { $ref: "#/components/responses/SuccessMessage" }

  # ------------------ ADMIN: ATRIBUT ------------------
  /admin/attributes:
    get:
      tags: [Admin - Atribut]
      summary: (Admin) Lihat semua atribut
      security: [{ sanctum: [] }]
      responses:
        "200": { description: OK }
    post:
      tags: [Admin - Atribut]
      summary: (Admin) Buat atribut
      security: [{ sanctum: [] }]
      requestBody:
        $ref: "#/components/requestBodies/StoreAttributeBody"
      responses:
        "201": { description: Created }
  /admin/attributes/{attributeId}:
    get:
      tags: [Admin - Atribut]
      summary: (Admin) Lihat detail atribut
      security: [{ sanctum: [] }]
      parameters: [{ $ref: "#/components/parameters/AttributeId" }]
      responses:
        "200": { description: OK }
    patch:
      tags: [Admin - Atribut]
      summary: (Admin) Update atribut
      security: [{ sanctum: [] }]
      parameters: [{ $ref: "#/components/parameters/AttributeId" }]
      requestBody:
        $ref: "#/components/requestBodies/UpdateAttributeBody"
      responses:
        "200": { description: OK }
    delete:
      tags: [Admin - Atribut]
      summary: (Admin) Hapus atribut
      security: [{ sanctum: [] }]
      parameters: [{ $ref: "#/components/parameters/AttributeId" }]
      responses:
        "200": { $ref: "#/components/responses/SuccessMessage" }

  # ------------------ ADMIN: NILAI ATRIBUT ------------------
  /admin/attributes/{attributeId}/values:
    post:
      tags: [Admin - Nilai Atribut]
      summary: (Admin) Buat nilai atribut baru untuk sebuah atribut
      security: [{ sanctum: [] }]
      parameters: [{ $ref: "#/components/parameters/AttributeId" }]
      requestBody:
        $ref: "#/components/requestBodies/StoreAttributeValueBody"
      responses:
        "201": { description: Created }
  /admin/values/{valueId}:
    patch:
      tags: [Admin - Nilai Atribut]
      summary: (Admin) Update nilai atribut
      security: [{ sanctum: [] }]
      parameters: [{ $ref: "#/components/parameters/ValueId" }]
      requestBody:
        $ref: "#/components/requestBodies/UpdateAttributeValueBody"
      responses:
        "200": { description: OK }
    delete:
      tags: [Admin - Nilai Atribut]
      summary: (Admin) Hapus nilai atribut
      security: [{ sanctum: [] }]
      parameters: [{ $ref: "#/components/parameters/ValueId" }]
      responses:
        "200": { $ref: "#/components/responses/SuccessMessage" }

  # ------------------ ADMIN: OPSI PRODUK ------------------
  /admin/products/{productId}/options:
    post:
      tags: [Admin - Opsi Produk]
      summary: (Admin) Tautkan opsi ke produk
      security: [{ sanctum: [] }]
      parameters: [{ $ref: "#/components/parameters/ProductId" }]
      requestBody:
        $ref: "#/components/requestBodies/StoreProductOptionBody"
      responses:
        "201": { description: Created }
  /admin/options/{optionId}:
    patch:
      tags: [Admin - Opsi Produk]
      summary: (Admin) Update opsi produk
      security: [{ sanctum: [] }]
      parameters: [{ $ref: "#/components/parameters/OptionId" }]
      requestBody:
        $ref: "#/components/requestBodies/UpdateProductOptionBody"
      responses:
        "200": { description: OK }
    delete:
      tags: [Admin - Opsi Produk]
      summary: (Admin) Hapus opsi dari produk
      security: [{ sanctum: [] }]
      parameters: [{ $ref: "#/components/parameters/OptionId" }]
      responses:
        "200": { $ref: "#/components/responses/SuccessMessage" }

  # ------------------ ADMIN: TAUTAN ITEM TAMBAHAN ------------------
  /admin/products/{productId}/add-ons:
    post:
      tags: [Admin - Tautan Item Tambahan]
      summary: (Admin) Tautkan item tambahan ke produk
      security: [{ sanctum: [] }]
      parameters: [{ $ref: "#/components/parameters/ProductId" }]
      requestBody:
        $ref: "#/components/requestBodies/StoreProductAddOnBody"
      responses:
        "200": { $ref: "#/components/responses/SuccessMessage" }
  /admin/products/{productId}/add-ons/{addOnId}:
    delete:
      tags: [Admin - Tautan Item Tambahan]
      summary: (Admin) Lepas tautan item tambahan dari produk
      security: [{ sanctum: [] }]
      parameters:
        - { $ref: "#/components/parameters/ProductId" }
        - { $ref: "#/components/parameters/AddOnId" }
      responses:
        "200": { $ref: "#/components/responses/SuccessMessage" }

# ===============================================================
# COMPONENTS (BAGIAN YANG DAPAT DIGUNAKAN KEMBALI)
# ===============================================================
components:
  schemas:
    ProductCategory:
      type: object
      description: Representasi dari sebuah kategori produk.
      properties:
        id:
          type: integer
          description: ID unik untuk kategori.
          example: 1
        name:
          type: string
          description: Nama kategori.
          example: "Undangan Pernikahan"
        slug:
          type: string
          description: Versi URL-friendly dari nama kategori.
          example: "undangan-pernikahan"
          readOnly: true
        description:
          type: string
          nullable: true
          description: Deskripsi singkat tentang kategori.
          example: "Berbagai macam desain undangan untuk hari spesial Anda."
        image_url:
          type: string
          format: url
          nullable: true
          description: URL lengkap ke gambar kategori.
          example: "http://127.0.0.1:8000/storage/product-categories/image.jpg"
          readOnly: true
        created_at:
          type: string
          format: date-time
          description: Waktu kapan kategori dibuat.
          example: "2025-08-08T17:00:00.000000Z"
          readOnly: true

    ProductCategoryResponse:
      type: object
      properties:
        message:
          type: string
          example: "Kategori produk berhasil dibuat."
        data:
          $ref: "#/components/schemas/ProductCategory"

    GenericError:
      type: object
      properties:
        message:
          type: string
          example: "Sumber daya tidak ditemukan."

    ErrorValidation:
      type: object
      properties:
        message:
          type: string
          example: "The given data was invalid."
        errors:
          type: object
          description: Kumpulan pesan error validasi.
          additionalProperties:
            type: array
            items:
              type: string
              example: "Nama kategori wajib diisi."

    SuccessMessage:
      type: object
      properties:
        message:
          type: string
          example: "Operasi berhasil."

  requestBodies:
    StoreProductCategoryBody:
      description: Data untuk membuat kategori produk baru.
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            required: [name]
            properties:
              name:
                type: string
                description: Nama untuk kategori baru.
                example: "Buku Tamu"
              description:
                type: string
                nullable: true
                description: Deskripsi opsional untuk kategori.
              image:
                type: string
                format: binary
                description: File gambar untuk kategori (opsional).
          encoding:
            image:
              contentType: image/png, image/jpeg, image/gif, image/webp

    UpdateProductCategoryBody:
      description: Data untuk memperbarui kategori produk. Gunakan `_method`=`PUT` untuk method spoofing.
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              _method:
                type: string
                description: "Wajib diisi dengan 'PUT' atau 'PATCH' untuk method spoofing."
                example: "PUT"
              name:
                type: string
                description: Nama baru untuk kategori.
                example: "Buku Tamu Pernikahan"
              description:
                type: string
                nullable: true
                description: Deskripsi baru untuk kategori.
              image:
                type: string
                format: binary
                description: "File gambar baru (opsional). Mengunggah gambar baru akan menggantikan yang lama."
          encoding:
            image:
              contentType: image/png, image/jpeg, image/gif, image/webp
    StoreProductBody:
      description: Data untuk produk baru.
      content:
        application/json:
          schema:
            type: object
            required: [category_id, name, base_price]
            properties:
              category_id: { type: integer, example: 1 }
              name: { type: string, example: "Undangan Klasik Elegan" }
              sku: { type: string, nullable: true, example: "SS-005" }
              description: { type: string, nullable: true }
              base_price: { type: integer, example: 5000 }
              min_order_quantity: { type: integer, example: 100 }
              is_active: { type: boolean, example: true }
    UpdateProductBody:
      description: Data untuk memperbarui produk.
      content:
        application/json:
          schema:
            type: object
            properties:
              category_id: { type: integer }
              name: { type: string }
              sku: { type: string, nullable: true }
              description: { type: string, nullable: true }
              base_price: { type: integer }
              min_order_quantity: { type: integer }
              is_active: { type: boolean }
    StoreProductImageBody:
      description: Data untuk mengunggah gambar produk.
      content:
        multipart/form-data:
          schema:
            type: object
            required: [images]
            properties:
              images: { type: array, items: { type: string, format: binary } }
              alt_texts:
                { type: array, nullable: true, items: { type: string } }
              is_featured_index: { type: integer, nullable: true }
    StoreAddOnBody:
      description: Data untuk item tambahan.
      content:
        application/json:
          schema:
            type: object
            required: [name, price]
            properties:
              name: { type: string, example: "Amplop Fancy" }
              price: { type: integer, example: 1200 }
    UpdateAddOnBody:
      description: Data untuk memperbarui item tambahan.
      content:
        application/json:
          schema:
            type: object
            properties:
              name: { type: string }
              price: { type: integer }
    StoreAttributeBody:
      description: Data untuk atribut baru.
      content:
        application/json:
          schema:
            type: object
            required: [name]
            properties:
              name: { type: string, example: "Jenis Kertas" }
    UpdateAttributeBody:
      description: Data untuk memperbarui atribut.
      content:
        application/json:
          schema:
            type: object
            properties:
              name: { type: string }
    StoreAttributeValueBody:
      description: Data untuk nilai atribut baru.
      content:
        application/json:
          schema:
            type: object
            required: [value]
            properties:
              value: { type: string, example: "Jasmine 200gsm" }
    UpdateAttributeValueBody:
      description: Data untuk memperbarui nilai atribut.
      content:
        application/json:
          schema:
            type: object
            properties:
              value: { type: string }
    StoreProductOptionBody:
      description: Data untuk menautkan nilai atribut ke produk.
      content:
        application/json:
          schema:
            type: object
            required: [attribute_value_id, price_adjustment]
            properties:
              attribute_value_id: { type: integer }
              price_adjustment:
                {
                  type: integer,
                  example: 1000,
                  description: "Bisa positif/negatif/nol",
                }
    UpdateProductOptionBody:
      description: Data untuk memperbarui opsi produk.
      content:
        application/json:
          schema:
            type: object
            properties:
              price_adjustment: { type: integer }
    StoreProductAddOnBody:
      description: Data untuk menautkan item tambahan ke produk.
      content:
        application/json:
          schema:
            type: object
            required: [add_on_id]
            properties:
              add_on_id: { type: integer }

  parameters:
    ProductCategoryId:
      name: productCategoryId
      in: path
      required: true
      description: ID numerik dari kategori produk.
      schema:
        type: integer
        example: 1
    ProductId:
      name: productId
      in: path
      required: true
      description: ID dari produk
      schema: { type: integer }
    ImageId:
      name: imageId
      in: path
      required: true
      description: ID dari gambar produk
      schema: { type: integer }
    AddOnId:
      name: addOnId
      in: path
      required: true
      description: ID dari item tambahan
      schema: { type: integer }
    AttributeId:
      name: attributeId
      in: path
      required: true
      description: ID dari atribut
      schema: { type: integer }
    ValueId:
      name: valueId
      in: path
      required: true
      description: ID dari nilai atribut
      schema: { type: integer }
    OptionId:
      name: optionId
      in: path
      required: true
      description: ID dari opsi produk (dari tabel product_options)
      schema: { type: integer }

  responses:
    NotFoundError:
      description: Sumber daya tidak ditemukan.
      content:
        application/json:
          schema: { $ref: "#/components/schemas/GenericError" }
    UnauthorizedError:
      description: Autentikasi gagal.
      content:
        application/json:
          schema: { $ref: "#/components/schemas/GenericError" }
    ForbiddenError:
      description: Tidak memiliki izin akses.
      content:
        application/json:
          schema: { $ref: "#/components/schemas/GenericError" }
    ValidationError:
      description: Data yang diberikan tidak valid.
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ErrorValidation" }
    SuccessMessage:
      description: Operasi berhasil.
      content:
        application/json:
          schema: { $ref: "#/components/schemas/SuccessMessage" }

  securitySchemes:
    sanctum:
      type: http
      scheme: bearer
      description: "Masukkan token Bearer Anda. Contoh: 'Bearer 1|abcdef...'"
