openapi: 3.0.3
info:
  title: Dua Insan Story API
  description: API untuk sistem pemesanan undangan online Dua Insan Story.
  version: 1.0.0
servers:
  - url: http://127.0.0.1:8000/api/v1
    description: Local Development Server

tags:
  - name: Authentication
    description: Endpoint untuk registrasi, login, dan logout.
  - name: Products (Customer)
    description: Akses publik untuk melihat produk.
  - name: Shopping Cart
    description: Mengelola keranjang belanja untuk tamu dan pengguna.
  - name: Admin Product Categories
    description: (Admin) Mengelola kategori produk.
  - name: Admin Products
    description: (Admin) Mengelola produk.
  - name: Admin Product Images
    description: (Admin) Mengelola gambar produk.
  - name: Admin Add-ons
    description: (Admin) Mengelola item tambahan.
  - name: Admin Attributes
    description: (Admin) Mengelola atribut opsi (e.g., Ukuran).
  - name: Admin Attribute Values
    description: (Admin) Mengelola nilai atribut (e.g., Kecil, Sedang).
  - name: Admin Product Options
    description: (Admin) Menautkan opsi ke produk.
  - name: Admin Product Add-ons
    description: (Admin) Menautkan item tambahan ke produk.

# ===============================================================
# PATHS (ENDPOINT DEFINITIONS)
# ===============================================================
paths:
  # ------------------ AUTHENTICATION ------------------
  /register:
    post:
      tags:
        - Authentication
      summary: Registrasi pengguna baru
      requestBody:
        $ref: '#/components/requestBodies/RegisterBody'
      responses:
        '201':
          description: Registrasi berhasil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '422':
          $ref: '#/components/responses/ValidationError'

  /login:
    post:
      tags:
        - Authentication
      summary: Login pengguna
      requestBody:
        $ref: '#/components/requestBodies/LoginBody'
      responses:
        '200':
          description: Login berhasil
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      token:
                        type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /logout:
    post:
      tags:
        - Authentication
      summary: Logout pengguna
      security:
        - sanctum: []
      responses:
        '200':
          description: Logout berhasil
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # ------------------ CUSTOMER FACING ------------------
  /customer/products:
    get:
      tags:
        - Products (Customer)
      summary: Lihat daftar produk aktif
      responses:
        '200':
          description: Daftar produk berhasil diambil
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'

  /customer/products/{productId}:
    get:
      tags:
        - Products (Customer)
      summary: Lihat detail produk
      parameters:
        - $ref: '#/components/parameters/ProductId'
      responses:
        '200':
          description: Detail produk berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetailResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # ------------------ SHOPPING CART ------------------
  /cart:
    get:
      tags:
        - Shopping Cart
      summary: Melihat isi keranjang
      parameters:
        - $ref: '#/components/parameters/SessionIdHeader'
      security:
        - sanctum: []
      responses:
        '200':
          description: Isi keranjang berhasil diambil
          headers:
            X-Session-ID:
              description: Session ID untuk pengguna tamu.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
    delete:
      tags:
        - Shopping Cart
      summary: Mengosongkan keranjang
      parameters:
        - $ref: '#/components/parameters/SessionIdHeader'
      security:
        - sanctum: []
      responses:
        '200':
          description: Keranjang berhasil dikosongkan.

  /cart/items:
    post:
      tags:
        - Shopping Cart
      summary: Menambah item ke keranjang
      parameters:
        - $ref: '#/components/parameters/SessionIdHeader'
      security:
        - sanctum: []
      requestBody:
        $ref: '#/components/requestBodies/StoreCartItemBody'
      responses:
        '201':
          description: Item berhasil ditambahkan
        '422':
          $ref: '#/components/responses/ValidationError'

  /cart/items/{cartItemId}:
    patch:
      tags:
        - Shopping Cart
      summary: Mengubah jumlah item
      parameters:
        - $ref: '#/components/parameters/CartItemId'
        - $ref: '#/components/parameters/SessionIdHeader'
      security:
        - sanctum: []
      requestBody:
        $ref: '#/components/requestBodies/UpdateCartItemBody'
      responses:
        '200':
          description: Jumlah berhasil diubah
    delete:
      tags:
        - Shopping Cart
      summary: Menghapus item dari keranjang
      parameters:
        - $ref: '#/components/parameters/CartItemId'
        - $ref: '#/components/parameters/SessionIdHeader'
      security:
        - sanctum: []
      responses:
        '200':
          description: Item berhasil dihapus
          
  # ------------------ ADMIN: PRODUCT CATEGORIES ------------------
  /admin/product-categories:
    get:
      tags:
        - Admin Product Categories
      summary: (Admin) Lihat semua kategori produk
      security:
        - sanctum: []
      responses:
        '200': { description: OK }
    post:
      tags:
        - Admin Product Categories
      summary: (Admin) Buat kategori produk baru
      security:
        - sanctum: []
      requestBody:
        $ref: '#/components/requestBodies/StoreProductCategoryBody'
      responses:
        '201': { description: Created }
        '422': { $ref: '#/components/responses/ValidationError' }

  /admin/product-categories/{productCategoryId}:
    get:
      tags:
        - Admin Product Categories
      summary: (Admin) Lihat detail kategori
      security:
        - sanctum: []
      parameters:
        - $ref: '#/components/parameters/ProductCategoryId'
      responses:
        '200': { description: OK }
        '404': { $ref: '#/components/responses/NotFoundError' }
    patch:
      tags:
        - Admin Product Categories
      summary: (Admin) Update kategori
      security:
        - sanctum: []
      parameters:
        - $ref: '#/components/parameters/ProductCategoryId'
      requestBody:
        $ref: '#/components/requestBodies/StoreProductCategoryBody'
      responses:
        '200': { description: OK }
        '422': { $ref: '#/components/responses/ValidationError' }
    delete:
      tags:
        - Admin Product Categories
      summary: (Admin) Hapus kategori
      security:
        - sanctum: []
      parameters:
        - $ref: '#/components/parameters/ProductCategoryId'
      responses:
        '200': { description: OK }
        '409': { description: Conflict (jika masih memiliki produk) }

  # ------------------ ADMIN: PRODUCTS ------------------
  /admin/products:
    get:
      tags:
        - Admin Products
      summary: (Admin) Lihat semua produk
      security:
        - sanctum: []
      responses:
        '200': { description: OK }
    post:
      tags:
        - Admin Products
      summary: (Admin) Buat produk baru
      security:
        - sanctum: []
      requestBody:
        $ref: '#/components/requestBodies/StoreProductBody'
      responses:
        '201': { description: Created }
        '422': { $ref: '#/components/responses/ValidationError' }

  /admin/products/{productId}:
    get:
      tags:
        - Admin Products
      summary: (Admin) Lihat detail produk
      security:
        - sanctum: []
      parameters:
        - $ref: '#/components/parameters/ProductId'
      responses:
        '200': { description: OK }
        '404': { $ref: '#/components/responses/NotFoundError' }
    patch:
      tags:
        - Admin Products
      summary: (Admin) Update produk
      security:
        - sanctum: []
      parameters:
        - $ref: '#/components/parameters/ProductId'
      requestBody:
        $ref: '#/components/requestBodies/StoreProductBody'
      responses:
        '200': { description: OK }
        '422': { $ref: '#/components/responses/ValidationError' }
    delete:
      tags:
        - Admin Products
      summary: (Admin) Hapus produk
      security:
        - sanctum: []
      parameters:
        - $ref: '#/components/parameters/ProductId'
      responses:
        '200': { description: OK }

  # ------------------ ADMIN: PRODUCT IMAGES ------------------
  /admin/products/{productId}/images:
    post:
      tags:
        - Admin Product Images
      summary: (Admin) Unggah gambar produk
      security:
        - sanctum: []
      parameters:
        - $ref: '#/components/parameters/ProductId'
      requestBody:
        $ref: '#/components/requestBodies/StoreProductImageBody'
      responses:
        '201': { description: Created }
        '422': { $ref: '#/components/responses/ValidationError' }
        
  /admin/images/{imageId}:
    delete:
      tags:
        - Admin Product Images
      summary: (Admin) Hapus gambar produk
      security:
        - sanctum: []
      parameters:
        - $ref: '#/components/parameters/ImageId'
      responses:
        '200': { description: OK }
        '404': { $ref: '#/components/responses/NotFoundError' }

  # ------------------ ADMIN: ADD-ONS ------------------
  /admin/add-ons:
    get:
      tags:
        - Admin Add-ons
      summary: (Admin) Lihat semua item tambahan
      security:
        - sanctum: []
      responses:
        '200': { description: OK }
    post:
      tags:
        - Admin Add-ons
      summary: (Admin) Buat item tambahan
      security:
        - sanctum: []
      requestBody:
        $ref: '#/components/requestBodies/StoreAddOnBody'
      responses:
        '201': { description: Created }
        '422': { $ref: '#/components/responses/ValidationError' }
        
  /admin/add-ons/{addOnId}:
    get:
      tags:
        - Admin Add-ons
      summary: (Admin) Lihat detail item tambahan
      security:
        - sanctum: []
      parameters:
        - $ref: '#/components/parameters/AddOnId'
      responses:
        '200': { description: OK }
    patch:
      tags:
        - Admin Add-ons
      summary: (Admin) Update item tambahan
      security:
        - sanctum: []
      parameters:
        - $ref: '#/components/parameters/AddOnId'
      requestBody:
        $ref: '#/components/requestBodies/StoreAddOnBody'
      responses:
        '200': { description: OK }
    delete:
      tags:
        - Admin Add-ons
      summary: (Admin) Hapus item tambahan
      security:
        - sanctum: []
      parameters:
        - $ref: '#/components/parameters/AddOnId'
      responses:
        '200': { description: OK }

  # ------------------ ADMIN: ATTRIBUTES ------------------
  /admin/attributes:
    get:
      tags:
        - Admin Attributes
      summary: (Admin) Lihat semua atribut
      security:
        - sanctum: []
      responses:
        '200': { description: OK }
    post:
      tags:
        - Admin Attributes
      summary: (Admin) Buat atribut
      security:
        - sanctum: []
      requestBody:
        $ref: '#/components/requestBodies/StoreAttributeBody'
      responses:
        '201': { description: Created }
        
  /admin/attributes/{attributeId}:
    get:
      tags:
        - Admin Attributes
      summary: (Admin) Lihat detail atribut
      security:
        - sanctum: []
      parameters:
        - $ref: '#/components/parameters/AttributeId'
      responses:
        '200': { description: OK }
    patch:
      tags:
        - Admin Attributes
      summary: (Admin) Update atribut
      security:
        - sanctum: []
      parameters:
        - $ref: '#/components/parameters/AttributeId'
      requestBody:
        $ref: '#/components/requestBodies/StoreAttributeBody'
      responses:
        '200': { description: OK }
    delete:
      tags:
        - Admin Attributes
      summary: (Admin) Hapus atribut
      security:
        - sanctum: []
      parameters:
        - $ref: '#/components/parameters/AttributeId'
      responses:
        '200': { description: OK }
        
  # ------------------ ADMIN: ATTRIBUTE VALUES ------------------
  /admin/attributes/{attributeId}/values:
    post:
      tags:
        - Admin Attribute Values
      summary: (Admin) Buat nilai atribut
      security:
        - sanctum: []
      parameters:
        - $ref: '#/components/parameters/AttributeId'
      requestBody:
        $ref: '#/components/requestBodies/StoreAttributeValueBody'
      responses:
        '201': { description: Created }
        
  /admin/values/{valueId}:
    patch:
      tags:
        - Admin Attribute Values
      summary: (Admin) Update nilai atribut
      security:
        - sanctum: []
      parameters:
        - $ref: '#/components/parameters/ValueId'
      requestBody:
        $ref: '#/components/requestBodies/StoreAttributeValueBody'
      responses:
        '200': { description: OK }
    delete:
      tags:
        - Admin Attribute Values
      summary: (Admin) Hapus nilai atribut
      security:
        - sanctum: []
      parameters:
        - $ref: '#/components/parameters/ValueId'
      responses:
        '200': { description: OK }
        
  # ------------------ ADMIN: PRODUCT OPTIONS ------------------
  /admin/products/{productId}/options:
    post:
      tags:
        - Admin Product Options
      summary: (Admin) Tautkan opsi ke produk
      security:
        - sanctum: []
      parameters:
        - $ref: '#/components/parameters/ProductId'
      requestBody:
        $ref: '#/components/requestBodies/StoreProductOptionBody'
      responses:
        '201': { description: Created }
        
  /admin/options/{optionId}:
    patch:
      tags:
        - Admin Product Options
      summary: (Admin) Update opsi produk
      security:
        - sanctum: []
      parameters:
        - $ref: '#/components/parameters/OptionId'
      requestBody:
        $ref: '#/components/requestBodies/UpdateProductOptionBody'
      responses:
        '200': { description: OK }
    delete:
      tags:
        - Admin Product Options
      summary: (Admin) Hapus opsi dari produk
      security:
        - sanctum: []
      parameters:
        - $ref: '#/components/parameters/OptionId'
      responses:
        '200': { description: OK }
        
  # ------------------ ADMIN: PRODUCT ADD-ONS ------------------
  /admin/products/{productId}/add-ons:
    post:
      tags:
        - Admin Product Add-ons
      summary: (Admin) Tautkan item tambahan ke produk
      security:
        - sanctum: []
      parameters:
        - $ref: '#/components/parameters/ProductId'
      requestBody:
        $ref: '#/components/requestBodies/StoreProductAddOnBody'
      responses:
        '200': { description: OK }

  /admin/products/{productId}/add-ons/{addOnId}:
    delete:
      tags:
        - Admin Product Add-ons
      summary: (Admin) Lepas tautan item tambahan
      security:
        - sanctum: []
      parameters:
        - $ref: '#/components/parameters/ProductId'
        - $ref: '#/components/parameters/AddOnId'
      responses:
        '200': { description: OK }

# ===============================================================
# COMPONENTS (REUSABLE PARTS)
# ===============================================================
components:
  # ------------------ SCHEMAS ------------------
  schemas:
    User:
      type: object
      properties:
        id: { type: integer, example: 1 }
        full_name: { type: string, example: "Budi Pelanggan" }
        email: { type: string, format: email, example: "budi@example.com" }
        phone_number: { type: string, example: "08123456789" }
        role: { type: string, enum: [admin, customer] }
    UserResponse:
      type: object
      properties:
        message: { type: string }
        data: { $ref: '#/components/schemas/User' }

    ProductCategory:
      type: object
      properties:
        id: { type: integer, example: 1 }
        name: { type: string, example: "Wedding Invitation" }
        slug: { type: string, example: "wedding-invitation" }
        description: { type: string, example: "Kategori untuk undangan pernikahan." }

    Product:
      type: object
      properties:
        id: { type: integer, example: 1 }
        name: { type: string, example: "Undangan Elegan" }
        base_price: { type: integer, example: 250000 }
        featured_image: { $ref: '#/components/schemas/ProductImage' }
    ProductDetailResponse:
      type: object
      properties:
        data:
          allOf:
            - $ref: '#/components/schemas/Product'
            - type: object
              properties:
                images:
                  type: array
                  items:
                    $ref: '#/components/schemas/ProductImage'
                options:
                  type: array
                  items:
                    $ref: '#/components/schemas/ProductOption'
                add_ons:
                  type: array
                  items:
                    $ref: '#/components/schemas/AddOn'

    ProductImage:
      type: object
      properties:
        id: { type: integer, example: 1 }
        url: { type: string, format: uri, example: "http://localhost/storage/img.jpg" }
        alt_text: { type: string, example: "Tampak depan" }
        is_featured: { type: boolean, example: true }

    ProductOption:
      type: object
      properties:
        id: { type: integer, example: 1 }
        price_adjustment: { type: integer, example: -5000 }
        value: { $ref: '#/components/schemas/AttributeValue' }

    Attribute:
      type: object
      properties:
        id: { type: integer, example: 1 }
        name: { type: string, example: "Ukuran" }

    AttributeValue:
      type: object
      properties:
        id: { type: integer, example: 1 }
        value: { type: string, example: "Kecil" }
        
    AddOn:
      type: object
      properties:
        id: { type: integer, example: 1 }
        name: { type: string, example: "Denah Lokasi" }
        price: { type: integer, example: 15000 }

    Cart:
      type: object
      properties:
        id: { type: integer }
        session_id: { type: string, format: uuid }
        total_items: { type: integer }
        subtotal: { type: integer }
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
    CartResponse:
      type: object
      properties:
        data: { $ref: '#/components/schemas/Cart' }
    CartItem:
      type: object
      properties:
        id: { type: integer }
        quantity: { type: integer }
        unit_price: { type: integer }
        sub_total: { type: integer }
        product: { $ref: '#/components/schemas/Product' }

    ErrorValidation:
      type: object
      properties:
        message: { type: string, example: "The given data was invalid." }
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string

  # ------------------ REQUEST BODIES ------------------
  requestBodies:
    RegisterBody:
      description: Data untuk registrasi pengguna baru.
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [full_name, email, password, password_confirmation]
            properties:
              full_name: { type: string, example: "Pengguna Baru" }
              email: { type: string, format: email, example: "baru@example.com" }
              password: { type: string, format: password, example: "password123" }
              password_confirmation: { type: string, format: password, example: "password123" }
    LoginBody:
      description: Kredensial untuk login.
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [email, password]
            properties:
              email: { type: string, format: email }
              password: { type: string, format: password }
    StoreCartItemBody:
      description: Data item yang akan ditambahkan ke keranjang.
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [product_id, quantity]
            properties:
              product_id: { type: integer }
              quantity: { type: integer }
              options: { type: array, items: { type: integer } }
              add_ons: { type: array, items: { type: integer } }
    UpdateCartItemBody:
      description: Jumlah kuantitas baru.
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [quantity]
            properties:
              quantity: { type: integer, example: 200 }
    StoreProductCategoryBody:
      description: Data kategori produk.
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [name]
            properties:
              name: { type: string, example: "Guest Book" }
              description: { type: string, example: "Buku tamu untuk acara." }
    StoreProductBody:
      description: Data produk baru.
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [category_id, name, base_price]
            properties:
              category_id: { type: integer }
              name: { type: string }
              description: { type: string }
              base_price: { type: integer }
              min_order_quantity: { type: integer }
              is_active: { type: boolean }
    StoreProductImageBody:
      description: Data gambar produk.
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            required: [images]
            properties:
              images: { type: array, items: { type: string, format: binary } }
              alt_texts: { type: array, items: { type: string } }
              is_featured_index: { type: integer }
    StoreAddOnBody:
      description: Data item tambahan.
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [name, price]
            properties:
              name: { type: string, example: "Amplop Fancy" }
              price: { type: integer, example: 5000 }
    StoreAttributeBody:
      description: Data atribut.
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [name]
            properties:
              name: { type: string, example: "Jenis Kertas" }
    StoreAttributeValueBody:
      description: Data nilai atribut.
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [value]
            properties:
              value: { type: string, example: "Jasmine" }
    StoreProductOptionBody:
      description: Data untuk menautkan opsi ke produk.
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [attribute_value_id, price_adjustment]
            properties:
              attribute_value_id: { type: integer }
              price_adjustment: { type: integer }
    UpdateProductOptionBody:
      description: Data untuk update opsi produk.
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [price_adjustment]
            properties:
              price_adjustment: { type: integer }
    StoreProductAddOnBody:
      description: Data untuk menautkan item tambahan.
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [add_on_id]
            properties:
              add_on_id: { type: integer }

  # ------------------ PARAMETERS ------------------
  parameters:
    SessionIdHeader:
      name: X-Session-ID
      in: header
      description: Session ID unik untuk pengguna tamu.
      required: false
      schema: { type: string }
    ProductId:
      name: productId
      in: path
      description: ID dari produk.
      required: true
      schema: { type: integer }
    ProductCategoryId:
      name: productCategoryId
      in: path
      description: ID dari kategori produk.
      required: true
      schema: { type: integer }
    CartItemId:
      name: cartItemId
      in: path
      description: ID dari item di keranjang.
      required: true
      schema: { type: integer }
    ImageId:
      name: imageId
      in: path
      description: ID dari gambar produk.
      required: true
      schema: { type: integer }
    AddOnId:
      name: addOnId
      in: path
      description: ID dari item tambahan.
      required: true
      schema: { type: integer }
    AttributeId:
      name: attributeId
      in: path
      description: ID dari atribut.
      required: true
      schema: { type: integer }
    ValueId:
      name: valueId
      in: path
      description: ID dari nilai atribut.
      required: true
      schema: { type: integer }
    OptionId:
      name: optionId
      in: path
      description: ID dari opsi produk.
      required: true
      schema: { type: integer }
      
  # ------------------ RESPONSES ------------------
  responses:
    NotFoundError:
      description: Sumber daya tidak ditemukan.
    UnauthorizedError:
      description: Autentikasi gagal.
    ForbiddenError:
      description: Tidak memiliki izin akses.
    ValidationError:
      description: Data yang diberikan tidak valid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorValidation'

  # ------------------ SECURITY SCHEMES ------------------
  securitySchemes:
    sanctum:
      type: http
      scheme: bearer
      description: "Masukkan token Bearer Anda. Contoh: 'Bearer 1|abcdef...'"